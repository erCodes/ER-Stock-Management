@page "/ProductCategories"
@inject NavigationManager Nav
@inject HttpClient Http

<div class="row">
    <div class="col-6">
        <h3>Product categories</h3>
        <h4>Add, modify or delete product categories here</h4>
        @if (Categories.Empty())
        {
            <h4>@Message</h4>
        }
        <button type="button" class="btn btn-secondary" @onclick=@(() => Nav.NavigateTo("/"))>Main page</button>
    </div>
    <div class="col-6 text-end d-inline-block">
        <img class="flags p-2" src="finnish.png" alt="FI" />
        <img class="flags p-2" src="english.png" alt="EN" />
        <img class="p-2" id="pagecolor" src="darkmode.png" alt="Light/Dark" />
    </div>
</div>

@if (!ModifiedCategories.Empty())
{
    <div class="container">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th scope="col">Category Name</th>
                    <th scope="col">Modify category</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <InputText type="text" @bind-value="NewCategoryName" placeholder="New Category"></InputText>
                    <button type="submit" @onclick="async () => await NewCategory(NewCategoryName)" class="btn btn-primary">Add New</button>
                </tr>
                @foreach (var c in ModifiedCategories)
                {
                    <tr>
                        <td>@c.Original.Name</td>
                        <InputText type="text" @bind-value="c.NewName" placeholder="@c.Original.Name"></InputText>
                        <button type="submit" @onclick="async () => await Modify(c)" class="btn btn-primary">Submit</button>
                        <input class="form-check-input" id="@c.Original.Id" type="checkbox" @bind="c.Delete">
                        <button type="button" @onclick="async () => await Delete(c)" class="btn btn-danger">Delete</button>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}



@code {
    string NewCategoryName = string.Empty;
    List<ProductCategory> Categories = new();
    List<ModifiedProductCategory> ModifiedCategories = new(); 
    string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("http://localhost:5032/GetAllCategories");
        if (response.StatusCode == HttpStatusCode.OK)
        {
            var result = await response.Content.ReadAsStringAsync();
            var serverContent = JsonSerializer.Deserialize<List<ProductCategory>>(result);
            if (serverContent == null) { return; }

            Categories = serverContent;
            foreach (var c in Categories)
            {
                var newEntry = new ModifiedProductCategory(c);
                ModifiedCategories.Add(newEntry);
            }
            return;
        }

        else if (response.StatusCode == HttpStatusCode.NoContent)
        {
            Message = $"{response.StatusCode}: There are no categories. Please add new one to continue";
            return;
        }

        else
        {
            Message = $"{response.StatusCode}: Failed to get categories. Please try again later.";
            return;
        }
    }

    private async Task Modify(ModifiedProductCategory modified)
    {
        if (string.IsNullOrWhiteSpace(modified.NewName)) { return; }

        var response = await Http.PutAsJsonAsync("http://localhost:5032/ModifyCategory", modified);
        if (response.StatusCode == HttpStatusCode.OK)
        {
            Nav.NavigateTo("/ProductCategories", true);
        }
        else if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            Message = $"{response.StatusCode}: You tried to give category name that already exists. Change the name and try again";
            return;
        }
        else
        {
            Message = $"{response.StatusCode}: Failed to Add modify category.";
        }
    }

    private async Task Delete(ModifiedProductCategory modified)
    {
        if (!modified.Delete) { return; }

        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Delete,
            RequestUri = new Uri("http://localhost:5032//DeleteCategory"),
            Content = new StringContent(JsonSerializer.Serialize(modified.Original.Id))
        };

        var response = await Http.SendAsync(request);
        if (response.StatusCode == HttpStatusCode.OK)
        {
            Nav.NavigateTo("/ProductCategories", true);
        }
        else if (response.StatusCode == HttpStatusCode.NoContent)
        {
            
        }
        else
        {
            Message = $"{response.StatusCode}: Failed to delete category.";
        }
    }

    private async Task NewCategory(string name)
    {
        var response = await Http.PostAsJsonAsync("http://localhost:5032/NewCategory", name);
        if (response.StatusCode == HttpStatusCode.OK)
        {
            Nav.NavigateTo("/ProductCategories", true);
        }
        else
        {
            Message = $"{response.StatusCode}: Failed to Add new category. Check if category exists already with a same name.";
        }
    }
}
